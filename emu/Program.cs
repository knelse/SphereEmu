using System.Net;
using System.Net.Sockets;
using System.Text;
using emu.Helpers;

namespace emu
{
    internal class Server
    {
        private const int BUFSIZE = 1024;
        
        public static void Main ()
        {
            const int port = 25860;

            var clientData = TestHelper.GetTestCharData();

            TcpListener? tcpListener = null;
            
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

            try
            {
                tcpListener = new TcpListener(IPAddress.Any, port);
                tcpListener.Start();
            }
            catch (SocketException se)
            {
                Console.WriteLine(se.Message);
                Environment.Exit(se.ErrorCode);
            }

            Console.WriteLine("Server up, waiting for connections...");
            
            // 1 SESSION
            const string readyToLoadInitialData_readable = "0a00 c800 1405 00001f42";
            const string serverCredResponse_readable =
                "3800 2c01 0000 044f 6f08 4020 1088 0e7d 1c35 7c12 0200 0000 0000 0000 001a 3b12 0100 ffff ffff ffff ffff 0000 0000 0000 0000 8d9d 0100 0000";
            //  "3800 2c01 0060 3f9e 6208 402010e0b2971c357c120200000000000000001a3b120100ffffffffffffffff00000000000000008d9d01000000"
            const string startDataResponse_1_readable = 
                "5200 2c01 0000 044f 6f08 4080 1001 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
           
            var transmissionEndPacket = Packet.ToByteArray();
            var readyToLoadInitialData = readyToLoadInitialData_readable.Replace(" ", "");
            var serverCredResponse = serverCredResponse_readable.Replace(" ", "");
            var startDataResponse_1 = startDataResponse_1_readable.Replace(" ", "");

            const string pongPacket = "12002c01002d03890ab9dec7f7601f016000";
            
            while (true)
            {
                NetworkStream? ns = null;

                try
                {
                    var client = tcpListener.AcceptTcpClient();
                    ns = client.GetStream();
                
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("Handling client...");
                    Console.ForegroundColor = ConsoleColor.White;
                
                    Console.WriteLine("SRV: Ready to load initial data");
                    ns.Write(Convert.FromHexString(readyToLoadInitialData));
                
                    Task.Run(() =>
                    {
                        while (ns.CanWrite)
                        {
                            ns.Write(Convert.FromHexString(pongPacket));
                            Thread.Sleep(2000);
                        }
                    });
                
                    var rcvBuffer = new byte[BUFSIZE];
                
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) == 0) {}
                    // client ack
                    Console.WriteLine("CLI: ack");
                    ns.Write(Convert.FromHexString(serverCredResponse));
                    Console.WriteLine("SRV: Credentials");
                
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) <= 12) {}
                    // client login
                    Console.WriteLine("CLI: Login data");
                    TestHelper.DumpLoginData(rcvBuffer);
                    
                    ns.Write(Convert.FromHexString(startDataResponse_1));
                    Console.WriteLine("SRV: Initial data 1");
                    Thread.Sleep(50);
                    ns.Write(clientData.ToByteArray());
                    Console.WriteLine("SRV: Initial data 2");
                    Thread.Sleep(50);
                    ns.Write(transmissionEndPacket);
                    Console.WriteLine("SRV: transmission end");
                    
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) < 0x15)
                    {
                    }
                    Console.WriteLine("CLI: Enter game");

                    const string enterGameResponse_1 =
                        "47012c01009a044f6f0800c2602aed2c8d0d006e1d181919645035c53d5a8944d7c273c5616ba6be7ee16102f0000000000000000000000000000000000400000000000000000000000000040000000400000000000400000004000400040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000400f0000000000000000000000000000000000000000010000000000000000000000000000000000055000000403400000000000090010000002003400b00b400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000320004b23fd0122b2ff74406005811000000";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_1));
                    Thread.Sleep(50);
                    
                    ns.Write(transmissionEndPacket);
                    Thread.Sleep(50);

                    const string enterGameResponse_2 =
                        "8a002c0100aa044f6f08406102000a8280f029064000000050108407503100aa000080822044c88a0144030000140481c2560c800c0000a0200816b76200c80000000541b8c015036801000028080206af18400b000040411072000000000000000a82b0f32b0600b4c4045010041d60318040f6ffff10fd8a0100346c1006000000040000001a1b010172002c0100aa044f6f08406383acccccac6c8c6e8e8b0b0085c646a6a626e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc565aecc0ca007240624c88908640c2d4cee8bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063838c2dcc8d6c6e2c0cae8c8b0bc046a6a626e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5050f0f6f47c5850e8f0e8008640c2d4cee8bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063838c2dcc8d6c6e2c0caeec0b4d8e8b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5050f0f0f40c5850e8f0e8008640c2d4cee8bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063838c2dcc8d6c6e2c0caeec0b0e8d8b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5050f0f0f40c5850e8f0e8008640c2d4cee8bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063838c2dcc8d6c6e2c0caeec4b8e8c8b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5050f0f0f40c5850e8f0e8008640c2d4cee8bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f08406383ac4d6c8c8b0b200caeec4b8e8c8b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a54d6c0c40c5850e8f0e8008640c2d4cee8bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f08406383aced8dac8c6d8e8b0be04b8e8c8b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a58d8c6d47c5a58d4e6e47c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f08406383aced8dac8c6dee0b4d8e8b0b808b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a58d8c6d47c5a58d4e0e40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f08406383aced8dac8c6dee0b0e8d8b0b808b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a58d8c6d47c5a58d4e0e40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f08406383aced8dac8c6dee4b8e8c8b0b808b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a58d8c6d47c5a58d4e0e40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063830c2e4c2eac6d8e8b0b808b0b808b0ba026e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc565ccec6c47c5a54d8c0c40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063830c2e4c2eac6d8e8bab2d4caf6c8e8b0b20e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a54d8c";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_2));
                    Thread.Sleep(50);

                    const string enterGameResponse_3 =
                        "0c40c5a54d8c0c40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063830c2e4c2eac6d8e8b4beeedad6d8e8b0b20e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc5a54d8c0c40c5a54d8c0c40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060072002c0100aa044f6f084063830c2e4c2eac6d8e8b6baeac8c6c8e8b0b20e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d4cc565ccec0c40c5a54d8c0c40c5850e8f0ee08bac8cedcb8c2dec0c84c70724068429a929890a2406008429a929890a24060077002c0100aa044f6f084063830caf0e8e2c8cae8c8b0ba08c6c8e8b0b20e62b26850524094a0704c7c62566c6458646c60567460120e60424c88908640c2d6c0a0ead4caecca50caf6c670a0ead4cae6c882dadcc8dcea50caf0c80c70724068429a929890a2406008429a929890a2406a0b12120000012002c010057e9f411315cf5c7530c016000c8002c0100ac3ff30b10802f809fe02946e0335ea92956ec8923f2989e2b0640649101e057788a11f88af5688a4bdaeb88a0cce68a0110596400f811a062043e9bb1a0626eef3aa2ecdfb96200441619007e46dd18814f6040a57850f98ec84671ae1800914506809f533746e013debf290eb0c32332ec9d2b0640649101e027ff8d11f80cb8798aff6df288784ee88a0110596400f8e97f63043ec3d19be27f9b3c225e1aba6200441619007e871454838f19b6a698ee3a91a81073aeb810140500c5d032000000bf002c0100ac3f87145443e10fdce0c66472c6001a01106e70635f74617665726e6b65657072000d0182aa6100809fa718025010841c7431006400008005a0fc22507e21f015580c7c051684648b42e485012c0e6081008b045928c06201160cb2688085832c1e6401018b085848c062021614b0a88085052c2e6081c9bdc8f80a2c3491171bb0e08045072c3c64f1010b105884c842041623b2209145092c4c6471620b145da4c0429573b14ab160b1458b2f5c6031030b1a58d4c0c24600c0002c0100ac3f9f62ac880f80842e0900000000000000004091450680020c788a0114b200e0ffffffbfc00201003f50313ac307404297040000000000000000a0c822034001063cc5000a130050100480503100050000808220048c8a012800000014044180540c40010000a0200803a562000a0000000541203815035000000028084201aa18800200004041100c54c500140000000a8270b02a06a00000005010040456310005000080822024b48a0128000000140441c1550c4001000000c5002c0100ac3fa06274464110165ec500140000000a82c0002b06a00000005010848658310005000080421600fcffffffff42c5f8151f00095d12000000000000000080228b4ce8232ac000a81840210b00feffffff7fa362fc8a0f80842e09000000000000000040914566f411156000540ca0900500ffffffff3f52317ec507404297040000000000000000a0c82253fa880a30002a0650c80280ffffffff5fa918bfe20320a14b020000000000000000506491397d440518001503286401c0ffffff3fbf002c0100ac3fa762fc8a0f80842e09000000000000000040914526f511156000540ca0900500ffffffff3f54317ec507404297040000000000000000a0c822b3fa880a30002a0650c80280ffffffff9faa18bfe20320a14b020000000000000000506491697d440518001503286401c0ffffffff6f558c5ff10190d02501000000000000000028b2c8bc3ea2020c808a0114b200e0ffffffffc72ac6aff80048e892000000000000000000145964621f51010640c5000a5900f0ffffff0fbf002c0100ac3fad62fc8a0f80842e09000000000000000040914566f611156000540ca0900500ffffffff3f57317ec507404297040000000000000000a0c82253fb880a30002a0650c80280ffff";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_3));
                    Thread.Sleep(50);

                    const string enterGameResponse_4 = "ffffdfab18bfe20320a14b020000000000000000506491b97d440518001503286401c0ffffffff0f568c5ff10190d02501000000000000000028b2c8e43ea2020c808a0114b200e0ffffffff172bc6aff80048e892000000000000000000145964761f51010640c5000a5900f0ffffff0fc9002c0100ac3fb26264860f80842e0900000000000000a04e91450680020c788a01142600a0200800b3620003000000054108a015031800000028088240ad18c000000040210b00feffffff7fb362a08f0f80842e090000000000000060509145264412156040560ca0c00201003f5a31d2c707404297040000000000000000a0c8227333890a30202b0650608100805fad18e8e30320a14b020000000000000010536491499244051890150328b04000c0cf560c60f10190d02501000000000000000028b2c80000c3002c0100ac3fb662004b01063cc5000a5900f0ffffffffbb1503327c002474490000000000000000b38a2c32001460c0530ca0300100852c00f8ffffffffe18ad12b3e0012ba24000000000000000000451619000a30e0290650c80280ffffffffc227604e00fcb6010c5000fc78c5e8151f00095d12000000000000000080228b0c000518f01403286401c0ffffff7fe1132e270080db000428007ebf62948c0f80842e0900000000000000004091450680020c788a01142600a0900500ffffffffc8002c0100ac3fc06288830f80842e0900000000000000004091450680020c788a01142600a0200800c26200960000000541081816035000000028088200b11880e80500404110068ac500640000000a8240602c06406a000050108482633100af000080822018208b01901a00001404e1c0590c000f0000e0272c8696f80048e892000000000000000000145964420f51010680c5000a5900f0ffffff5f60810080dfb018f8e203f2654b0210f73f06c0b6360650649199fd48518001603180421600fcffffff03c8002c0100ac3fc362e04be11dd4eebec8d2c2dae4d2dcce6260007ec462d0870f80842e0900000000000000404b9145e63d13156000580ca0900500ffffffffbf623174c707404297040000000000000000a0c822135f010a30002c0650c80280ffffffff9fb118f9e20320a14b0200000000000000005064910920e9528001603180421600fcffffffff8ec5b0171f10d85a124070113200fdc53180228b4c1e062ec000b01840210b00feffffff7fc862e48b0f80842e090000000000000000409145e6982405a7002c0100ac3fc862e44b010680c5000a5900f0ffffffff7316e35d7c002474490000000000000000008a2c325b9fa80003c06200852c00f8ffffffffed0ec0033eadc59a62d59d44a27aeab96220441619000a4f70390100f0e31d80077cdc3335c5dd3a8944f9d573c540882c3200149e00730200e0a73c000ff824706b8abb6713892cebe78a0110596400283cc2ffffffbf45410c70e119aa5f1d8a4884398698e42f8a01";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_4));
                    Thread.Sleep(50);
                    
                    
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) < 0x38)
                    {
                    }

                    const string enterGameResponse_5 =
                        "2b002c0100ac044f6f08400362202000a08143b0220000d0702840580d00007088040181bbd6114f31806610002c0100ac3f000004406198bde408";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_5));
                    Thread.Sleep(50);
                    
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("Closing connection...");
                    Console.ForegroundColor = ConsoleColor.White;
                    ns.Close();
                    client.Close();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    ns?.Close();
                }
            }
        }
    }
}