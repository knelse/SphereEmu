using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Text;
using emu.Helpers;

namespace emu
{
    internal class Server
    {
        private const int BUFSIZE = 1024;
        
        public static void Main ()
        {
            const int port = 25860;

            var clientData = TestHelper.GetTestCharData();

            TcpListener? tcpListener = null;
            
            Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);

            try
            {
                tcpListener = new TcpListener(IPAddress.Any, port);
                tcpListener.Start();
            }
            catch (SocketException se)
            {
                Console.WriteLine(se.Message);
                Environment.Exit(se.ErrorCode);
            }

            Console.WriteLine("Server up, waiting for connections...");
            
            // 1 SESSION
            const string readyToLoadInitialData_readable = "0a00 c800 1405 00001f42";
            const string serverCredResponse_readable =
                "3800 2c01 0000 044f 6f08 4020 1088 0e7d 1c35 7c12 0200 0000 0000 0000 001a 3b12 0100 ffff ffff ffff ffff 0000 0000 0000 0000 8d9d 0100 0000";
            //  "3800 2c01 0060 3f9e 6208 402010e0b2971c357c120200000000000000001a3b120100ffffffffffffffff00000000000000008d9d01000000"
            const string startDataResponse_1_readable = 
                "5200 2c01 0000 044f 6f08 4080 1001 0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
           
            var transmissionEndPacket = Packet.ToByteArray();
            var readyToLoadInitialData = readyToLoadInitialData_readable.Replace(" ", "");
            var serverCredResponse = serverCredResponse_readable.Replace(" ", "");
            var startDataResponse_1 = startDataResponse_1_readable.Replace(" ", "");
            
            while (true)
            {
                NetworkStream? ns = null;

                try
                {
                    var client = tcpListener.AcceptTcpClient();
                    ns = client.GetStream();
                
                    Console.ForegroundColor = ConsoleColor.Yellow;
                    Console.WriteLine("Handling client...");
                    Console.ForegroundColor = ConsoleColor.White;
                
                    Console.WriteLine("SRV: Ready to load initial data");
                    ns.Write(Convert.FromHexString(readyToLoadInitialData));
                
                    var rcvBuffer = new byte[BUFSIZE];
                
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) == 0) {}
                    // client ack
                    Console.WriteLine("CLI: ack");
                    ns.Write(Convert.FromHexString(serverCredResponse));
                    Console.WriteLine("SRV: Credentials");
                
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) <= 12) {}
                    // client login
                    Console.WriteLine("CLI: Login data");
                    TestHelper.DumpLoginData(rcvBuffer);
                    
                    ns.Write(Convert.FromHexString(startDataResponse_1));
                    Console.WriteLine("SRV: Initial data 1");
                    Thread.Sleep(50);
                    ns.Write(clientData.ToByteArray());
                    Console.WriteLine("SRV: Initial data 2");
                    Thread.Sleep(50);

                    var ingameServerPing = "10002c0100de044f6f08408193eee408";
                
                    Task.Run(() =>
                    {
                        while (ns.CanWrite)
                        {
                            ns.Write(Convert.FromHexString(ingameServerPing));
                            Thread.Sleep(15000);
                        }
                    });
                    
                    Task.Run(() =>
                    {
                        while (ns.CanWrite)
                        {
                            ns.Write(transmissionEndPacket);
                            Thread.Sleep(3000);
                        }
                    });
                    
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) < 0x15)
                    {
                    }
                    Console.WriteLine("CLI: Enter game");

                    const string enterGameResponse_1 =
                        "47012c01009a044f6f0800c2602aed2c8d0d006e1d181919645035c53d5a8944d7c273c5616ba6be7ee16102f0000000000000000000000000000000000400000000000000000000000000040000000400000000000400000004000400040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000400f0000000000000000000000000000000000000000010000000000000000000000000000000000055000000403400000000000090010000002003400b00b400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000320004b23fd0122b2ff74406005811000000";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_1));
                    Thread.Sleep(50);

                    const string enterGameResponse_2 =
                        "97002c010042fa1e6e08c002507e1128bf10f80a2c06be020b42b24521f2c2001607b0408045822c1460b1000b065934c0c241160fb2808045042c246031010b0a5854c0c2021617b0c0e45e647c05169ac88b0d5870c0a203161eb2f88005082c426421028b115990c8a2041626b238b1058a2e5260a1cab958a558b0d8a2c5172eb09881050d2c6a6061230541c899a8034006000000";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_2));
                    Thread.Sleep(50);

                    const string enterGameResponse_3 =
                        "97002c010042fa1e6e08c002507e1128bf10f80a2c06be020b42b24521f2c2001607b0408045822c1460b1000b065934c0c241160fb2808045042c246031010b0a5854c0c2021617b0c0e45e647c05169ac88b0d5870c0a203161eb2f88005082c426421028b115990c8a2041626b238b1058a2e5260a1cab958a558b0d8a2c5172eb09881050d2c6a6061230541c899a8034006000000";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_3));
                    Thread.Sleep(50);

                    // const string enterGameResponse_4 = "ffffdfab18bfe20320a14b020000000000000000506491b97d440518001503286401c0ffffffff0f568c5ff10190d02501000000000000000028b2c8e43ea2020c808a0114b200e0ffffffff172bc6aff80048e892000000000000000000145964761f51010640c5000a5900f0ffffff0fc9002c0100ac3fb26264860f80842e0900000000000000a04e91450680020c788a01142600a0200800b3620003000000054108a015031800000028088240ad18c000000040210b00feffffff7fb362a08f0f80842e090000000000000060509145264412156040560ca0c00201003f5a31d2c707404297040000000000000000a0c8227333890a30202b0650608100805fad18e8e30320a14b020000000000000010536491499244051890150328b04000c0cf560c60f10190d02501000000000000000028b2c80000c3002c0100ac3fb662004b01063cc5000a5900f0ffffffffbb1503327c002474490000000000000000b38a2c32001460c0530ca0300100852c00f8ffffffffe18ad12b3e0012ba24000000000000000000451619000a30e0290650c80280ffffffffc227604e00fcb6010c5000fc78c5e8151f00095d12000000000000000080228b0c000518f01403286401c0ffffff7fe1132e270080db000428007ebf62948c0f80842e0900000000000000004091450680020c788a01142600a0900500ffffffffc8002c0100ac3fc06288830f80842e0900000000000000004091450680020c788a01142600a0200800c26200960000000541081816035000000028088200b11880e80500404110068ac500640000000a8240602c06406a000050108482633100af000080822018208b01901a00001404e1c0590c000f0000e0272c8696f80048e892000000000000000000145964420f51010680c5000a5900f0ffffff5f60810080dfb018f8e203f2654b0210f73f06c0b6360650649199fd48518001603180421600fcffffff03c8002c0100ac3fc362e04be11dd4eebec8d2c2dae4d2dcce6260007ec462d0870f80842e0900000000000000404b9145e63d13156000580ca0900500ffffffffbf623174c707404297040000000000000000a0c822135f010a30002c0650c80280ffffffff9fb118f9e20320a14b0200000000000000005064910920e9528001603180421600fcffffffff8ec5b0171f10d85a124070113200fdc53180228b4c1e062ec000b01840210b00feffffff7fc862e48b0f80842e090000000000000000409145e6982405a7002c0100ac3fc862e44b010680c5000a5900f0ffffffff7316e35d7c002474490000000000000000008a2c325b9fa80003c06200852c00f8ffffffffed0ec0033eadc59a62d59d44a27aeab96220441619000a4f70390100f0e31d80077cdc3335c5dd3a8944f9d573c540882c3200149e00730200e0a73c000ff824706b8abb6713892cebe78a0110596400283cc2ffffffbf45410c70e119aa5f1d8a4884398698e42f8a01";
                    //
                    // ns.Write(Convert.FromHexString(enterGameResponse_4));
                    // Thread.Sleep(50);
                    //
                    
                    while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) < 0x38)
                    {
                    }

                    const string enterGameResponse_5 =
                        "2b002c0100ac044f6f08400362202000a08143b0220000d0702840580d00007088040181bbd6114f318066";
                    
                    ns.Write(Convert.FromHexString(enterGameResponse_5));
                    Thread.Sleep(1000);

                    const string someData =
                        //"c8002c01044f6ff30b10802f809fe02946e0335ea92956ec8923f2989e2b0640649101e057788a11f88af5688a4bdaeb88a0cce68a0110596400f811a062043e9bb1a0626eef3aa2ecdfb96200441619007e46dd18814f6040a57850f98ec84671ae1800914506809f533746e013debf290eb0c32332ec9d2b0640649101e027ff8d11f80cb8798aff6df288784ee88a0110596400f8e97f63043ec3d19be27f9b3c225e1aba6200441619007e831454838f19b6a698ee3a91a81073aeb810140500c5d032000000c0002c01044f6f83145443e10fdce0c66472c6001a01106e70635f74617665726e6b65657072000d0182aa6100809f05169de10320a14b02000000000000000050649101a00003475600850900280802c00516800200004041100222b000140000000a8220208105a0000000501084015c2d0005000080822010e06701280000001404a1a07d0b40010000a0200806ef5c000a00000005413880e602500000002808020237178002000040411012b8b000140000000a82a0a09f05a000000000c5002c01044f6f16587446411016f6b300140000000a82c0c09f05a000000050108486fe2c0005000080421600fcfffffffffcb3c80c1f00095d1200000000000000409d228b0c00051838b202284c0040411000feb300060000000a821000a0053000000050100481002d8001000080421600fcffffffff90ac800c1f00095d1200000000000000c0ac228b0c00051838b202284c0040210b00feffffff7fa544948c0f80842e0900000000000000004091450680020c1c5901142600a0900500ffffffffca002c01044f6fab4488830f80842e0900000000000000004091450680020c1c5901142600a02008004456009600000005410838cc025000000028088200641680e80500404110068aad00640000000a8240c0a005406a000050108402072d00af000080822018ec5a01901a00001404e180d70a000f0000e0b73b000ff8b4166b8a55771289eaa9e78a8110596400283cc1e50400c08f77001ef071cfd41477eb2412e557cf150321b2c800507802cc0900809ff2003ce093c0ad29ee9e4d24b2ac9f2b064064910100ba002c01044f6fca03f040e111feffffff2d0a62800bcf50fdea504422cc31c4247f51fcbbd562457c002474490000000000000000008a2c32001460e0c80aa0900500ffffffff05160800f85d60f12b3e0012ba24000000000000000000451699d0475480010b2c80421600fcffffffff22b0f8151f00095d12000000000000000080228bcce8232ac080051640210b00feffffff7f1258fc8a0f80842e090000000000000000409145a6f4111560c0020ba0900500ffffffffbf002c01044f6fb85afc8a0f80842e090000000000000000409145e6f4111560c0020ba0900500ffffffff3ffc2c7ec507404297040000000000000000a0c82293fa880a3060810550c80280ffffffff5ffb16bfe20320a14b020000000000000000506491597d440518b0c002286401c0ffffffffef9d8b5ff10190d02501000000000000000028b2c8b43ea2020c58600114b200e0ffffffff07cdc5aff80048e8920000000000000000001459645e1f5101062cb0000a5900f0ffffff0fbf002c01044f6fdc5cfc8a0f80842e09000000000000000040914526f6111560c0020ba0900500ffffffff3f2e2c7ec507404297040000000000000000a0c82233fb880a3060810550c80280ffffffff9f7e16bfe20320a14b020000000000000000506491a97d440518b0c002286401c0ffffffff6f3f8b5ff10190d02501000000000000000028b2c8dc3ea2020c58600114b200e0ffffffffc79fc5aff80048e892000000000000000000145964721f5101062cb0000a5900f0ffffff0fcb002c01044f6ffd59fc8a0f80842e09000000000000000040914566f7111560c0020ba0900500ffffffffbfff2cd0c707404297040000000000000030a8c8221322890a30e09f0550608100801f8016e9e30320a14b020000000000000000506491b99944";
                          "c8002c010034d2f40b10802f809fe02946e0335ea92956ec8923f2989e2b0640649101e057788a11f88af5688a4bdaeb88a0cce68a0110596400f811a062043e9bb1a0626eef3aa2ecdfb96200441619007e46dd18814f6040a57850f98ec84671ae1800914506809f533746e013debf290eb0c32332ec9d2b0640649101e027ff8d11f80cb8798aff6df288784ee88a0110596400f8e97f63043ec3d19be27f9b3c225e1aba6200441619007e851454838f19b6a698ee3a91a81073aeb810140500c5d032000000c0002c010034d285145443e10fdce0c66472c6001a01106e70635f74617665726e6b65657072000d0182aa6100801f622902d09010400268c0200000000000000000fc164be90c1f00095d12000000000000000080228b0c000518402c05284c0040411000184b01140000000a8210d0580aa000000050100481c752000500008082200c4096022800000014048140b21440010000a020080593a5000a000000054130a02c05500000002808c241652980020000404110102c4b011400000000ca002c010034d28ba574464110122e4b01140000000a82a080590aa000000050108485cc520005000080822030689602280000001404a1c1b31440010000a0900500ffffffffbfcf5232c307404297040000000000000050a7c82203400106104b010a130050100400d05280010000808220048496020c00000014044140b41460000000a0900500ffffffff3fd25220c307404297040000000000000030abc82203400106104b010a130050c80280ffffffff5f6b2925e30320a14b0200000000000000005064910100b7002c010034d2ada5944c0106104b010a130050c80280ffffffff9f6b29e2e00320a14b02000000000000000050649101a0000388a500850900280802c06b298025000040411002604b01140000000a8220105b0a207a010050108401d9520019000080822010cc9602901a00001404a180b614c02b0000a0200806b5a500a4060000054138b02d05c0030000f8bd96a2253e0012ba24000000000000000000451699d043548001d75280421600fcffffff1758200000bd002c010034d2bb03f0804f6bb1a658752791a89e7aae180891450680c2135c4e0000fc7807e0011ff74c4d71b74e22517ef55c3110228b0c008527c09c0000f8290fc0033e09dc9ae2eed94422cbfab96200441619000a8ff0ffffff6f5110035c7886ea57872212618e2126f98be29f62292be20320a14b02000000000000000050649101a0000388a500852c00f8ffffff2fb04000c08fb1945ff10190d02501000000000000000028b2c8843ea2020c2c960214b200e0ffffff1fbf002c010034d28da5fc8a0f80842e09000000000000000040914566f411156060b114a0900500ffffffffbfc7527ec507404297040000000000000000a0c82253fa880a30b0580a50c80280ffffffff1f6429bfe20320a14b020000000000000000506491397d440518582c05286401c0ffffffff4fb2945ff10190d02501000000000000000028b2c8a43ea2020c2c960214b200e0ffffffff3759caaff80048e892000000000000000000145964561f510106164b010a5900f0ffffff0fbf002c010034d294a5fc8a0f80842e090000000000000000409145a6f511156060b114a0900500ffffffffbfca527ec507404297040000000000000000a0c822f3fa880a30b0580a50c80280ffffffff9f6529bfe20320a14b020000000000000000506491897d440518582c05286401c0ffffffffefb2945ff10190d02501000000000000000028b2c8cc3ea2020c2c960214b200e0ffffffff8759caaff80048e8920000000000000000001459646a1f510106164b010a5900f0ffffff0fb9002c010034d299a5fc8a0f80842e090000000000000000409145e6f611156060b114a0900500ffffffff3fcd527ec507404297040000000000000000a0c82293fb880a30b0580a50c80280ffffffff9f6729bfe20320a14b020000000000000000506491d97d440518582c05286401";

                    const string someData_2 =
                        //"0518f0cf0228b04000c02f400bf4f10190d02501000000000000008829b2c82449a2020cf8670114582000e0276405b0f80048e8920000000000000000001459640028c0c0911540210b00feffffff7f4a56f48a0f80842e0900000000000000004091450600c9002c01044f6f4a56f44a01068eac000a5900f0ffffff5ff804cc0900713780010a80df9611bde20320a14b02000000000000000050649101a00003475600852c00f8ffffff2f7cc2e504c0b81b800005c08fc80a2df10190d02501000000000000000028b2c8841ea2020cac120114b200e0ffffffbfc0020100bfc32cf0c507e4cb960420ee7f0c806d6d0ca0c82233fb91a20003ab4400852c00f8ffffff2fbc83dadd17595a589b5c9adb590c0cc00f320bfaf00190d02501000000000000006829b2c8bc6722c5002c01044f6f9059d04701065689000a5900f0ffffffff2bb642777c002474490000000000000000008a2c32f115a00003ab4400852c00f8ffffffff3168912f3e0012ba2400000000000000000045169900922e0518582502286401c0ffffffffcf410b7bf10181ad250104172103d05f1c0328b2c8e461e0020cac120114b200e0ffffffffb76b45bef80048e8920000000000000000001459648e49521460609508a0900500ffffffff3f5e2bdec507404297040000000000000000a0c822b3f589003f002c01044f6fbc56bc4b01065689000a5900f0ffffffffcbb6c2357c002474490000000000000000008a2c32001460e0c80aa0300101852c00f8ffffff07";
                          "c0ffffffff0fb414f4f10190d02501000000000000000c2ab2c88448a2020c7c960214582000e0175a4afaf80048e8920000000000000000001459646e265101063e4b010a2c100000c8002c010034d2a2a5a08f0f80842e0900000000000000404c91452649121560e0b314a0c0020100bfd15280c507404297040000000000000000a0c82203400106104b010a5900f0ffffffff2b2da5577c002474490000000000000000008a2c3200146000b114a0900500ffffffff854fc09c00086f0318a000f8a596d22b3e0012ba24000000000000000000451619000a3080580a50c80280ffffffffc2275c4e0088b701085000fc604bc1171f902f5b1280b8ff3100b6b53180228bccec478a020cb8960200b7002c010034d2b0a5e04b210b00feffffff0befa076f7459616d62697e676160303f08b2d853e7c0024744900000000000000005a8a2c32ef99a80003aea500852c00f8ffffffffc996a23b3e0012ba24000000000000000000451699f80a508001d75280421600fcffffffff664bc9171f00095d12000000000000000080228b4c004997020cb8960214b200e0ffffffff475b8abdf880c0d69200828b9001e82f8e01145964f2307001065c4b010a5900f0ffffff0f78002c010034d2b5a5e48b0f80842e090000000000000000409145e698244501065c4b010a5900f0ffffffffb32de55d7c002474490000000000000000008a2c325b9fa80003aea500852c00f8ffffffffe996e21a3e0012ba24000000000000000000451619000a3080580a50988080421600fcffffff03";

                    ns.Write(Convert.FromHexString(someData));
                    Thread.Sleep(50);
                    ns.Write(Convert.FromHexString(someData_2));
                    Thread.Sleep(50);
                    const string temp_1 = "1b002c010074044f6f084043420009a00183000000000000000000";
                    ns.Write(Convert.FromHexString(temp_1));
                    Thread.Sleep(50);
                    
                    const string temp_2 = "20002c010078044f6f0843e325000000000000000000349e400041e309081400";
                    ns.Write(Convert.FromHexString(temp_2));

                    Task.Run(() =>
                    {
                        Thread.Sleep(4000);
                        const string temp_3 = "0f002c010066fa1e6e084043220009";
                        ns.Write(Convert.FromHexString(temp_3));
                    });
                    
                    // Task.Run(() =>
                    // {
                    //     var pingByte = 0b1001110010110110;
                    //     
                    //     while (ns.CanWrite)
                    //     {
                    //         var str = Convert.ToString(pingByte, 16);
                    //         var pongPacket = $"12002c010055044f6f08dc4{str}30d016000";
                    //         ns.Write(Convert.FromHexString(pongPacket));
                    //         pingByte ^= 0b1000000000000000;
                    //         pingByte += 1;
                    //         Thread.Sleep(2000);
                    //     }
                    // });
                    
                    //var pingByte = 0b1001110010110110;
                    var pongStrStart = "12002c0100";

                    while (ns.CanRead)
                    {
                        while (ns.Read(rcvBuffer, 0, rcvBuffer.Length) != 38)
                        {
                        }

                        var clientPingStr = Convert.ToHexString(rcvBuffer[..38])[18..];
                        Console.WriteLine(clientPingStr);

                        //var pongPart = Convert.ToString(pingByte, 16);
                        var temp = Convert.FromHexString(clientPingStr[12..14])[0];
                        temp += 7;
                        var temp2 = Convert.FromHexString(clientPingStr[14..16])[0];
                        temp2 += 14;
                        var pongStr = pongStrStart + clientPingStr[..12] + Convert.ToHexString(new [] {temp, temp2}) + clientPingStr[16..24] + "00";
                        Console.WriteLine(pongStr);
                        // var pongPacket = $"12002c010055044f6f08dc4{str}30d016000";
                        ns.Write(Convert.FromHexString(pongStr));
                        // pingByte ^= 0b1000000000000000;
                        // pingByte += 1;
                        // Thread.Sleep(2000);
                        // var bytesRcvd = ns.Read(rcvBuffer, 0, rcvBuffer.Length);
                        //
                        // if (bytesRcvd == 8 && rcvBuffer[6] == 0xf4 && rcvBuffer[7] == 0x01)
                        // {
                        //     ns.Write(transmissionEndPacket);
                        // }
                    }
                    
                    Console.ForegroundColor = ConsoleColor.White;
                    ns.Close();
                    client.Close();
                }
                catch (Exception e)
                {
                    Console.WriteLine(e.Message);
                    ns?.Close();
                }
            }
        }
    }
}